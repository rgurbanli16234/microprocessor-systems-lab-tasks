#include <avr/io.h>
#include <util/delay.h>

// Variable to count how many times button is pressed
uint8_t pressCount = 0;
// Variable to remember last button state
uint8_t lastButtonState = 0;

void setup(void) {
    // Set PD6 and PD5 as outputs for PWM (Timer0)
    DDRD |= (1 << PD6) | (1 << PD5);
    // Set PB1 as output for PWM (Timer1)
    DDRB |= (1 << PB1);

    // Set PD2 as input for the button
    DDRD &= ~(1 << PD2);
    // Enable pull-up resistor for the button
    PORTD |= (1 << PD2);

    // Configure Timer0 for Fast PWM mode
    TCCR0A |= (1 << WGM00) | (1 << WGM01);
    // Enable non-inverting PWM on OC0A and OC0B
    TCCR0A |= (1 << COM0A1) | (1 << COM0B1);
    // Start Timer0 with no prescaler
    TCCR0B |= (1 << CS00);

    // Configure Timer1 for Fast PWM 8-bit mode
    TCCR1A |= (1 << WGM10);
    TCCR1B |= (1 << WGM12);
    // Enable non-inverting PWM on OC1A
    TCCR1A |= (1 << COM1A1);
    // Start Timer1 with no prescaler
    TCCR1B |= (1 << CS10);
}

void loop(void) {
    // Read current button state (inverted because of pull-up)
    uint8_t currentButtonState = PIND & (1 << PD2);

    // Check if button was pressed (went from high to low)
    if (currentButtonState && !lastButtonState) {
        // Increase press counter
        pressCount++;
        // Reset counter after 12 presses
        if (pressCount > 12) pressCount = 1;

        // Calculate brightness step (0, 1, 2, 3)
        uint8_t step = (pressCount - 1) % 4;
        // Calculate which LED to control (0, 1, 2)
        uint8_t ledGroup = (pressCount - 1) / 4;
        // Calculate brightness value (64, 128, 192, 255)
        uint8_t brightness = (step + 1) * 64;

        // Turn off all LEDs first
        OCR0A = 0;
        OCR0B = 0;
        OCR1A = 0;

        // Set brightness for current LED group
        if (ledGroup == 0) OCR0A = brightness;      // LED1 on PD6
        else if (ledGroup == 1) OCR0B = brightness; // LED2 on PD5
        else if (ledGroup == 2) OCR1A = brightness; // LED3 on PB1

        // Wait for button to settle
        _delay_ms(50);
    }

    // Save current state for next check
    lastButtonState = currentButtonState;
}
